#! /bin/bash
# vim: fileencoding=utf8 foldmethod=marker
#{{{ License header: MIT
# Copyright (c) 2014 Till Maas <opensource@till.name>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#}}}

# Check whether script executed or sourced
if [ "$_" == "$0" ]
then
    # Script was executed
    TILLCONF_MAIN="true"
    DESTDIR="$(readlink -f ${1:-${HOME}})"
    TILLCONF="$(readlink -f "${0%/*}")/"
fi


# Abort on failure
set -e

# For debugging
set -x

# Generic utilities
normpath() {
    # /./ -> /
    normed=${1//\/.\///}
    # // -> /
    # FIXME: Should actually not match at the beginning, because // != / in posix:
    # http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap04.html#tag_04_11
    normed=${normed//\/\///}
    echo "${normed}"
}

commonprefix() {
    # Return common path prefix of $1 and $2
    _IFS=$IFS
    IFS=/
    path1=$(normpath "$1")
    path2=$(normpath "$2")
    parts1=($path1)
    parts2=($path2)
    IFS=$_IFS

    # Initial
    prefix=""

    matching=1
    for ((i=0; i < ${#parts2[@]}; i++))
    do
        if [[ $matching && ${parts1[i]} == ${parts2[i]} ]]
        then
            #echo component ${parts2[i]} > /dev/stderr
            prefix+=${parts2[i]}/
            continue
        else
            #echo different component ${parts1[i]} ${parts2[i]} > /dev/stderr
            matching=0
        fi
    done
    prefix=${prefix%/}
    echo "${prefix}"
}


relpath() {
    # Return relative path from $2 to $1
    local dir1="${1%/*}"
    local dir2="${2%/*}"
    local prefix=$(commonprefix "${dir1}" "${dir2}")

    local subdirs1=${dir1#${prefix}}
    local subdirs2=${dir2#${prefix}}

    local _IFS=$IFS
    IFS=/
    local subdirparts2=($subdirs2)
    IFS=$_IFS

    local relativepath=""
    for ((i=0; i < ${#subdirparts2[@]} - 1; i++))
    do
        relativepath+="../"
    done

    # remove trailing slash
    relativepath="${relativepath%/}"
    if [[ -z "${relativepath}" ]]
    then
        relativepath="."
    fi

    # add subdirs1
    relativepath+="${subdirs1%/}"

    # add last component of 1
    local file1="${1##*/}"
    if [[ -n "${file1}" ]]
    then
        relativepath+="/${file1}"
    fi

    echo "${relativepath}"
}


relsymlink() {
    # Symlink to $1 from $2
    ln -sf -- $(relpath "${@}") ${2}
}

# Used for config management
c() {
    cp "${TILLCONF}/${1}" "${DESTDIR}/${2:-${1}}"
}


cr() {
    cp -a "${TILLCONF}/${1}" "${DESTDIR}/${2:-${1}}"
}


md() {
    mkdir -p "${DESTDIR}/${1}"
}


lns() {
    local target="${TILLCONF}${1}"
    local linkfile="${DESTDIR}/${2:-${1}}"

    # If target is a directory install linkfile only if it does not exist
    if [ ! \( -d "${target}" -a -e "${linkfile}" \) ]
    then
        relsymlink "${target}" "${linkfile}"
    fi
}


main() {
    read -p "Going to install tillconf to '${DESTDIR}' - Abort with CTRL-C:"
    if [ ! -d ${DESTDIR}/.vim/bundle/neobundle ]
    then
        echo "Installing neobundle..."
        git clone https://github.com/Shougo/neobundle.vim ${DESTDIR}/.vim/bundle/neobundle
        echo "done"
    fi

    lns .vimrc
    lns .gitconfig
    md .config/
    lns .config/git
}


if [ -n "${TILLCONF_MAIN}" ]
then
    main
fi
